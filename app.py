# -*- coding: utf-8 -*-
import os
import sys
import streamlit as st
import openai
from langchain_community.vectorstores import FAISS
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain.chains import ConversationalRetrievalChain

# Set default encoding to UTF-8 without modifying stdout/stderr
import locale
try:
    locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, '')  # Use system default locale
    except:
        pass  # Continue even if locale setting fails

# Nastavenie slovensk√©ho jazyka a dark mode
st.set_page_config(
    page_title="Chatbot o bezpeƒçnosti pri pr√°ci",
    page_icon="üßë‚Äçüíº",
    layout="centered",
    initial_sidebar_state="expanded",
)

# Aplikovanie dark mode pomocou CSS
st.markdown("""
    <style>
    [data-testid="stAppViewContainer"] {
        color: white !important;
    }
    .stApp {
        background-color: #0E1117;
    }
    </style>
    """, unsafe_allow_html=True)

# Nadpis aplik√°cie
st.title("Chatbot o bezpeƒçnosti pri pr√°ci")
st.write("Tento chatbot poskytuje inform√°cie o slovensk√Ωch z√°konoch t√Ωkaj√∫cich sa bezpeƒçnosti pri pr√°ci.")

# Vytvorenie sidebar pre API kƒæ√∫ƒç
with st.sidebar:
    st.header("Nastavenia")
    api_key = st.text_input("OpenAI API kƒæ√∫ƒç", type="password")
    
    if api_key:
        os.environ["OPENAI_API_KEY"] = api_key
        st.success("API kƒæ√∫ƒç bol nastaven√Ω!")
    else:
        st.warning("Pros√≠m, zadajte v√°≈° OpenAI API kƒæ√∫ƒç pre pou≈æ√≠vanie chatbota.")
    
    st.markdown("---")
    st.markdown("## O aplik√°cii")
    st.markdown("T√°to aplik√°cia vyu≈æ√≠va vektorov√∫ datab√°zu pre poskytovanie inform√°ci√≠ o slovensk√Ωch z√°konoch o bezpeƒçnosti pri pr√°ci.")

# Funkcia pre naƒç√≠tanie FAISS vektorov√©ho √∫lo≈æiska
@st.cache_resource
def load_vectorstore():
    try:
        embeddings = OpenAIEmbeddings()
        vectorstore = FAISS.load_local(
            folder_path="processed_data",
            embeddings=embeddings,
            index_name="index",
            allow_dangerous_deserialization=True
        )
        return vectorstore
    except Exception as e:
        st.error(f"Chyba pri naƒç√≠tavan√≠ vektorov√©ho √∫lo≈æiska: {e}")
        return None

# Inicializ√°cia chat hist√≥rie
if "messages" not in st.session_state:
    st.session_state.messages = []

# Zobrazenie predch√°dzaj√∫cich spr√°v
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Spracovanie nov√Ωch spr√°v
if api_key:
    # Naƒç√≠tanie vektorov√©ho √∫lo≈æiska
    vectorstore = load_vectorstore()
    
    if vectorstore:
        # Vytvorenie chatbota s vy≈°≈°ou kreativitou ale st√°le faktickou presnos≈•ou
        llm = ChatOpenAI(
            temperature=0.7,  # Vy≈°≈°ia kreativita pre zauj√≠mavej≈°ie odpovede
            model_name="gpt-4o"
        )
        
        # Vytvori≈• re≈•azec s vlastn√Ωm syst√©mov√Ωm promptom pre kreat√≠vnej≈°ie ale faktick√© odpovede
        qa_chain = ConversationalRetrievalChain.from_llm(
            llm=llm,
            retriever=vectorstore.as_retriever(search_kwargs={"k": 4}),
            return_source_documents=True,
            verbose=False
        )
        
        # Chat interface
        if prompt := st.chat_input("Nap√≠≈°te va≈°u ot√°zku o bezpeƒçnosti pri pr√°ci..."):
            # Pridanie u≈æ√≠vateƒæskej spr√°vy do hist√≥rie
            st.session_state.messages.append({"role": "user", "content": prompt})
            
            # Zobrazenie u≈æ√≠vateƒæskej spr√°vy
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Zobrazenie indik√°tora naƒç√≠tavania
            with st.chat_message("assistant"):
                message_placeholder = st.empty()
                message_placeholder.markdown("Prem√Ω≈°ƒæam...")
                
                # Z√≠skanie chat hist√≥rie pre kontext
                chat_history = [(q["content"], a["content"]) for q, a in zip(
                    [m for m in st.session_state.messages if m["role"] == "user"][:-1],
                    [m for m in st.session_state.messages if m["role"] == "assistant"]
                )]
                
                try:
                    # Strict factual Slovak answer, always use semantic search
                    strict_prompt = (
                        prompt +
                        "\n\nOdpovedaj iba fakticky, struƒçne a v slovenƒçine. "
                        "Pou≈æi inform√°cie, ktor√© najviac v√Ωznamovo s√∫visia s ot√°zkou, aj keƒè nie s√∫ presne rovnak√©. "
                        "Nepou≈æ√≠vaj ≈æiadne pr√≠klady, anal√≥gie ani kreat√≠vne roz≈°√≠renia. "
                        # "Ak nem√°≈° dostatok inform√°ci√≠, povedz to jasne."
                    )
                    response = qa_chain({"question": strict_prompt, "chat_history": chat_history})
                    answer = response["answer"]
                    # Fallback if answer is empty or generic
                    fallback_phrases = [
                        "neviem", "nem√°m dostatok inform√°ci√≠", "neviem odpoveda≈•", "nem√°m inform√°cie", "I don't know", "No relevant information found"
                    ]
                    if (not answer.strip() or any(phrase in answer.lower() for phrase in fallback_phrases)) and not response["source_documents"]:
                        answer = "Nena≈°iel som konkr√©tne inform√°cie. Sk√∫ste sa op√Ωta≈• na konkr√©tny z√°kon alebo t√©mu."
                    # Pridanie inform√°ci√≠ o zdrojoch (unik√°tne)
                    if response["source_documents"]:
                        sources = set()
                        for doc in response["source_documents"]:
                            if hasattr(doc, 'metadata') and doc.metadata:
                                source_info = doc.metadata.get('source', 'Nezn√°my zdroj')
                                sources.add(source_info)
                        if sources:
                            answer += "\n\n**Zdroje:**"
                            for source in sources:
                                answer += f"\n- {source}"
                    
                    # Aktualiz√°cia placeholderu s odpoveƒèou
                    message_placeholder.markdown(answer)
                    
                    # Pridanie odpovede do hist√≥rie
                    st.session_state.messages.append({"role": "assistant", "content": answer})
                except Exception as e:
                    # Handle encoding issues and other errors
                    error_msg = "Do≈°lo k chybe. Pros√≠m, sk√∫ste op√§≈•."
                    
                    # If it's an encoding error, provide a more specific message
                    if "codec can't encode character" in str(e) or "UnicodeEncodeError" in str(e) or "UnicodeDecodeError" in str(e):
                        error_msg = "Do≈°lo k probl√©mu s k√≥dovan√≠m znakov. Sk√∫sime to vyrie≈°i≈•."
                        # Try a simpler response without any special characters
                        try:
                            response = qa_chain({"question": "Summarize workplace safety laws in Slovak", "chat_history": []})
                            if response and "answer" in response:
                                message_placeholder.markdown(response["answer"])
                                st.session_state.messages.append({"role": "assistant", "content": response["answer"]})
                        except Exception as inner_e:
                            print(f"Secondary error: {str(inner_e)}")
                    
                    # Show the error message
                    message_placeholder.markdown(error_msg)
                    print(f"Error detail: {str(e).__class__.__name__}: {str(e)}")
    else:
        st.error("Nepodarilo sa naƒç√≠ta≈• vektorov√© √∫lo≈æisko. Skontrolujte, ƒçi s√∫ s√∫bory spr√°vne umiestnen√© v prieƒçinku processed_data.")
else:
    # Ak nie je nastaven√Ω API kƒæ√∫ƒç, zobrazi≈• uv√≠taciu spr√°vu
    with st.chat_message("assistant"):
        st.markdown("Vitajte! Pre zaƒçatie konverz√°cie zadajte v√°≈° OpenAI API kƒæ√∫ƒç v boƒçnom paneli.")
